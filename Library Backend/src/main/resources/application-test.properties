spring.config.activate.on-profile= test
spring.h2.console.enabled= true
spring.h2.console.path= /fullstack_react_library_h2-console
spring.datasource.url=jdbc:h2:mem:testDb;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.defer-datasource-initialization=false
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql = true
server.port= 2488

## SQL DELETE AND DROP SCRIPTS
sql.delete.users = DELETE FROM Users
sql.drop.users = DROP TABLE Users IF EXISTS
sql.delete.book = DELETE FROM Book
sql.drop.book = DROP TABLE Book IF EXISTS
sql.delete.checkout = DELETE FROM CheckOut
sql.drop.checkout = DROP TABLE CheckOut IF EXISTS
sql.delete.history = DELETE FROM History
sql.drop.history = DROP TABLE History IF EXISTS
sql.delete.messages = DELETE FROM Messages
sql.drop.messages = DROP TABLE Messages IF EXISTS
sql.delete.review = DELETE FROM Review
sql.drop.review = DROP TABLE Review IF EXISTS
sql.delete.jwtrefreshtoken = DELETE FROM JwtRefreshToken
sql.drop.jwtrefreshtoken = DROP TABLE JwtRefreshToken IF EXISTS

## SQL INSERT STATEMENTS
sql.insert.book = INSERT INTO Book(bookId,bookTitle,bookAuthor,bookDescription,copies,copiesAvailable,bookCategory) VALUES \
 (1,'Spring Boot Microservices','Prahlad','Good book for springboot and microservices concepts',9,6,'Backend Developer Programming'), \
 (2,'Become a Guru in JavaScript','Luv, Lena','Pellentesque varius aliquam lacus quis rhoncus. Nam a dui lectus. Vestibulum libero elit, ultricies sit amet sagittis eu, molestie at velit. Donec tincidunt tempus magna, quis facilisis libero elementum non. Sed velit lacus, laoreet sed augue fermentum, sagittis convallis metus. Sed nec est at massa venenatis aliquet. Donec pretium interdum fringilla. Sed ornare tellus enim, a tincidunt libero dictum vitae. Proin bibendum posuere dui. Donec sagittis neque massa, sed semper nulla vehicula at.',15,15,'FE'), \
 (3,'Exploring Vue.js','Luv, Jakub','Proin at urna faucibus, pretium mi in, dapibus metus. Interdum et malesuada fames ac ante ipsum primis in faucibus. Nullam elementum ligula ut vestibulum tincidunt. Aenean dignissim enim eu libero accumsan, ultricies efficitur mauris bibendum. Sed vel blandit ligula, non tincidunt velit. Suspendisse vulputate tristique enim, a vulputate arcu accumsan vitae. Donec egestas ornare velit vestibulum tincidunt. Suspendisse ac dui nec tellus vulputate aliquet. Curabitur vitae mauris in turpis vulputate hendrerit at eget urna. Donec at suscipit nisi. Ut sit amet dignissim orci. Nunc sit amet tristique enim. Phasellus consectetur auctor dignissim. Curabitur cursus turpis dapibus, molestie dui finibus, molestie ante. Proin quis justo ut ipsum aliquet venenatis in ut enim.',10,10,'FE'), \
 (4,'Advanced Techniques in Big Data','Luv, Alexander','Nunc eget lorem ac neque tincidunt mollis. Fusce finibus laoreet nunc nec hendrerit. Curabitur eu placerat urna, sit amet pellentesque enim. Donec velit ligula, congue eu lobortis vel, interdum nec tellus. Nulla nisl ipsum, porta non egestas sed, vulputate quis nisi. Etiam pellentesque in velit non convallis. Nullam id risus quis augue posuere sodales vel maximus justo. Maecenas nec leo a nibh aliquet placerat nec sed massa. Duis sit amet nisi libero. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus non viverra dolor. Pellentesque ligula mauris, congue quis neque quis, mollis scelerisque ligula. Pellentesque semper, erat commodo luctus mollis, nulla ipsum consectetur dolor, quis blandit massa sem fringilla libero. Maecenas eget mi nec est condimentum fermentum. Vivamus vehicula est sit amet ante gravida, eu finibus quam elementum. Proin egestas leo eu sagittis euismod.',12,12,'Data'), \
 (5,'Crash Course in Big Data','Luv, Judy','Morbi eu tempus eros, in imperdiet sem. Nulla sed sagittis nisl, porttitor fringilla libero. Nullam ut urna aliquet, hendrerit quam in, dignissim diam. In in nibh vel nisi fermentum pretium sit amet vitae mi. Pellentesque eget augue efficitur, volutpat tellus eget, fringilla augue. Pellentesque tempus mi ac risus lacinia, et tincidunt lectus rutrum. Nullam et nibh a odio luctus tincidunt nec in ipsum. Sed ac est nulla. Nulla purus turpis, dignissim sit amet euismod lobortis, consequat ut dui. Maecenas commodo velit in elementum placerat. Nam sit amet blandit ante, sit amet mollis neque. Ut placerat venenatis leo sit amet dapibus. Nunc varius cursus lobortis. Aenean euismod dui at diam euismod aliquet. Fusce feugiat orci nec commodo placerat.',20,20,'Data');
sql.insert.messages = INSERT INTO Messages (messagesId,adminEmail,closed,messageResponse,question,title,userEmail) VALUES \
   (1,'admin@gmail.com',1,'I have been trying to work this out for a long time and no matter what happens I cannot figure this dang thing out','What should we do here?','I do not know what to tell you friend. You are on your own.','kirti@gmail.com'), \
  (2, 'admin@gmail.com',1,'I have been trying to work this out for a long time and no matter what happens I cannot figure this dang thing out', 'What should we do here example 2 user?','I do not know what to tell you friend. You are on your own.','kirtishekhar1997@gmail.com');
sql.insert.users = INSERT INTO Users (userId,contactNumber,emailAddress,fullName,userName) VALUES \
(1,'9971302233','monucool@gmail.com','Mihir Pandey','monu'), \
(2,'987654321','admin@gmail.com','admin','admin'), \
(3,'9971302487','nirmalapandey2050@gmail.com','Nirmala Pandey','Nimmi');
sql.insert.checkout = INSERT INTO CheckOut (checkoutId,userEmail,checkoutDate,returnDate,bookId) VALUES \
(1, 'example1user@email.com', '2022-05-22', '2022-06-25', 1),\
(2, 'example2user@email.com', '2022-05-22', '2022-06-26', 1),\
(3, 'example1user@email.com', '2022-05-22', '2022-06-01', 2);
sql.insert.history = INSERT INTO History (historyId,bookTitle,bookAuthor,bookDescription,checkoutDate,returnDate,userEmail) VALUES \
(1,'Spring Boot Microservices','Prahlad','Good book for springboot and microservices concepts', '2022-05-22', '2022-06-25','kirtishekhar1997@gmail.com'), \
 (2,'Become a Guru in JavaScript','Luv, Lena','Book for descriptive concepts of javascript', '2022-05-22', '2022-06-26','monucool@gmail.com'), \
 (3,'Exploring Kafka','Luv, Jakub','Intoduction book on apache kafka.', '2022-05-22', '2022-06-01','nidhi@gmail.com');
sql.insert.review = INSERT INTO Review (reviewId,userEmail,date,rating,bookId,reviewDescription) VALUES \
  (1, 'example1user@email.com', NOW(), 4, 1, 'First book is pretty good book overall'), \
  (2, 'example2user@email.com', NOW(), 4.5, 2, 'Second books is pretty good book overall');
sql.insert.jwtrefreshtoken = INSERT INTO JwtRefreshToken (tokenId,tokenCreationDate,tokenExpirationDate,userId) VALUES\
  ('14b63a9c-4eb7-4200-a39c-d315954332a4','2023-01-16 19:22:27','2023-01-17 19:22:27',2),\
  ('1db41754-00a0-4153-b248-0fb1e49faa04','2023-01-16 17:36:59','2023-01-17 17:36:59',1),\
  ('584ce2c3-282a-44d6-bd93-c29942fb0784','2023-01-16 19:06:48','2023-01-17 19:06:48',1);


## SQL CREATE TABLE STATEMENTS
sql.create.table.book = CREATE TABLE Book (bookId BIGINT NOT NULL PRIMARY KEY,bookTitle VARCHAR(255) NULL,bookAuthor VARCHAR(255) NULL,bookDescription TEXT NULL,copies INT NOT NULL,copiesAvailable INT NOT NULL,bookCategory VARCHAR(255) NULL);
sql.create.table.messages = CREATE TABLE Messages (messagesId bigint NOT NULL PRIMARY KEY,adminEmail varchar(255) DEFAULT NULL,closed bit(1) DEFAULT NULL,messageResponse varchar(255) DEFAULT NULL,question varchar(255) DEFAULT NULL,title varchar(255) DEFAULT NULL,userEmail varchar(255) DEFAULT NULL);
sql.create.table.users = CREATE TABLE Users (userId BIGINT NOT NULL PRIMARY KEY,userName VARCHAR(255) NOT NULL,fullName VARCHAR(255) NOT NULL,emailAddress VARCHAR(255) NOT NULL,contactNumber VARCHAR(255) NOT NULL);
sql.create.table.checkout = CREATE TABLE CheckOut (checkoutId bigint NOT NULL PRIMARY KEY,bookId bigint DEFAULT NULL,checkoutDate varchar(255) DEFAULT NULL,returnDate varchar(255) DEFAULT NULL,userEmail varchar(255) DEFAULT NULL);
sql.create.table.history = CREATE TABLE History (historyId bigint NOT NULL,bookAuthor varchar(255) DEFAULT NULL,bookDescription varchar(255) DEFAULT NULL,bookTitle varchar(255) DEFAULT NULL,checkoutDate varchar(255) DEFAULT NULL,returnDate varchar(255) DEFAULT NULL,userEmail varchar(255) DEFAULT NULL);
sql.create.table.review = CREATE TABLE Review (reviewId bigint NOT NULL ,bookId bigint DEFAULT NULL,date datetime DEFAULT NULL,rating double DEFAULT NULL,reviewDescription varchar(255) DEFAULT NULL,userEmail varchar(255) DEFAULT NULL);
sql.create.table.jwtrefreshtoken = CREATE TABLE JwtRefreshToken (tokenId varchar(255) NOT NULL PRIMARY KEY,tokenCreationDate datetime NOT NULL,tokenExpirationDate datetime NOT NULL,userId bigint NOT NULL);
